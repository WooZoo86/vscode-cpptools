/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
// Do not edit this file. It is machine generated.
{
	"c_cpp.command.configurationSelect.title": "Konfiguration auswählen...",
	"c_cpp.command.configurationProviderSelect.title": "Konfigurationsanbieter ändern...",
	"c_cpp.command.configurationEditJSON.title": "Konfigurationen bearbeiten (JSON)",
	"c_cpp.command.configurationEditUI.title": "Konfigurationen bearbeiten (Benutzeroberfläche)",
	"c_cpp.command.switchHeaderSource.title": "Header/Quelle umschalten",
	"c_cpp.command.enableErrorSquiggles.title": "Fehlerwellenlinien aktivieren",
	"c_cpp.command.disableErrorSquiggles.title": "Fehlerwellenlinien deaktivieren",
	"c_cpp.command.toggleIncludeFallback.title": "Fallback der IntelliSense-Engine bei Includefehlern umschalten",
	"c_cpp.command.toggleDimInactiveRegions.title": "Farbgebung für inaktive Regionen umschalten",
	"c_cpp.command.resetDatabase.title": "IntelliSense-Datenbank zurücksetzen",
	"c_cpp.command.takeSurvey.title": "An Umfrage teilnehmen",
	"c_cpp.command.buildAndDebugActiveFile.title": "Aktive Datei erstellen und debuggen",
	"c_cpp.command.logDiagnostics.title": "Diagnose protokollieren",
	"c_cpp.command.referencesViewGroupByType.title": "Nach Verweistyp gruppieren",
	"c_cpp.command.referencesViewUngroupByType.title": "Gruppierung nach Verweistyp aufheben",
	"c_cpp.command.rescanWorkspace.title": "Arbeitsbereich erneut überprüfen",
	"c_cpp.command.vcpkgClipboardInstallSuggested.title": "vcpkg-Installationsbefehl in Zwischenablage kopieren",
	"c_cpp.command.vcpkgOnlineHelpSuggested.title": "vcpkg-Hilfeseite aufrufen",
	"c_cpp.configuration.formatting.description": "Configures the formatting engine",
	"c_cpp.configuration.formatting.clangFormat.description": "clang-format will be used to format code",
	"c_cpp.configuration.formatting.vcFormat.description": "The Visual C++ formatting engine will be used to format code",
	"c_cpp.configuration.formatting.Default.description": "clang-format will be used to format code",
	"c_cpp.configuration.formatting.Disabled.description": "Code formatting will be disabled",
	"c_cpp.configuration.vcFormat.indent.braces.description": "Braces are indented by the amount specified in the Editor: Tab Size setting",
	"c_cpp.configuration.vcFormat.indent.multiLineRelativeTo.description": "When a new line is typed, indent the new line relatively to:",
	"c_cpp.configuration.vcFormat.indent.multiLineRelativeTo.outermostParenthesis.description": "the outermost open parenthesis",
	"c_cpp.configuration.vcFormat.indent.multiLineRelativeTo.innermostParenthesis.description": "the innermost open parenthesis",
	"c_cpp.configuration.vcFormat.indent.multiLineRelativeTo.statementBegin.description": "the beginning of the current statement",
	"c_cpp.configuration.vcFormat.indent.preserveIndentationWithinParentheses.description": "When a new line is typed, it is aligned under the opening parenthesis or it is indented by the amount specified in the Editor: Tab Size setting",
	"c_cpp.configuration.vcFormat.indent.caseLabels.description": "Labels are indented relative to switch statements by the amount specified in the Editor: Tab Size setting",
	"c_cpp.configuration.vcFormat.indent.caseContents.description": "Code inside case is indented relative to its label by the amount specified in the Editor: Tab Size setting",
	"c_cpp.configuration.vcFormat.indent.caseContentsWhenBlock.description": "Indent braces following a case statement by the amount specified in the Editor: Tab Size setting",
	"c_cpp.configuration.vcFormat.indent.lambdaBracesWhenParameter.description": "Indent braces of lambdas used as function parameters relative to the start of the statement by the amount specified in the Editor: Tab Size setting",
	"c_cpp.configuration.vcFormat.indent.gotoLabels.description": "The position of goto labels",
	"c_cpp.configuration.vcFormat.indent.gotoLabels.oneLeft.description": "to the left of the current code indentation, by the amount specified in the Editor: Tab Size setting",
	"c_cpp.configuration.vcFormat.indent.gotoLabels.leftmostColumn.description": "at the leftmost edge of the code",
	"c_cpp.configuration.vcFormat.indent.gotoLabels.none.description": "goto labels will not be formatted",
	"c_cpp.configuration.vcFormat.indent.preprocessor.description": "The position of preprocessor directives",
	"c_cpp.configuration.vcFormat.indent.preprocessor.oneLeft.description": "to the left of the current code indentation, by the amount specified in the Editor: Tab Size setting",
	"c_cpp.configuration.vcFormat.indent.preprocessor.leftmostColumn.description": "at the leftmost edge of the code",
	"c_cpp.configuration.vcFormat.indent.preprocessor.none.description": "preprocessor directives will not be formatted",
	"c_cpp.configuration.vcFormat.indent.accessSpecifiers.description": "Access specifiers are indented relative to class or struct definitions by the amount specified in the Editor: Tab Size setting",
	"c_cpp.configuration.vcFormat.indent.namespaceContents.description": "Code is indented relative to its enclosing namespace by the amount specified in the Editor: Tab Size setting",
	"c_cpp.configuration.vcFormat.indent.preserveComment.description": "Einzug von Kommentaren wird bei Formatierungsvorgängen nicht geändert",
	"c_cpp.configuration.vcFormat.newLine.beforeOpenBrace.namespace.description": "The position of opening braces for namespaces",
	"c_cpp.configuration.vcFormat.newLine.beforeOpenBrace.type.description": "The position of opening braces for type definitions",
	"c_cpp.configuration.vcFormat.newLine.beforeOpenBrace.lambda.description": "The position of opening braces for lambda functions",
	"c_cpp.configuration.vcFormat.newLine.beforeOpenBrace.function.description": "The position of opening braces for functions",
	"c_cpp.configuration.vcFormat.newLine.beforeOpenBrace.block.description": "The position of opening braces for control blocks",
	"c_cpp.configuration.vcFormat.newLine.beforeOpenBrace.newLine.description": "opening braces are moved to a new line",
	"c_cpp.configuration.vcFormat.newLine.beforeOpenBrace.sameLine.description": "opening braces are kept on the same line and a space is added before each one",
	"c_cpp.configuration.vcFormat.newLine.beforeOpenBrace.ignore.description": "opening braces are not formatted",
	"c_cpp.configuration.vcFormat.newLine.scopeBracesOnSeparateLines.description": "Place opening and closing braces for scopes on separate lines",
	"c_cpp.configuration.vcFormat.newLine.closeBraceSameLine.emptyType.description": "Schließende geschweifte Klammern für leere Typen in dieselbe Zeile wie öffnende geschweifte Klammern verschieben",
	"c_cpp.configuration.vcFormat.newLine.closeBraceSameLine.emptyFunction.description": "In leeren Funktionsrümpfen schließende geschweifte Klammern in dieselbe Zeile wie öffnende geschweifte Klammern verschieben",
	"c_cpp.configuration.vcFormat.newLine.beforeCatch.description": "\"catch\" und ähnliche Schlüsselwörter in neuer Zeile platzieren",
	"c_cpp.configuration.vcFormat.newLine.beforeElse.description": "else-Anweisung in neuer Zeile anordnen",
	"c_cpp.configuration.vcFormat.newLine.beforeWhileInDoWhile.description": "'while' in einer do-while-Schleife in einer neuen Zeile platzieren",
	"c_cpp.configuration.vcFormat.space.beforeFunctionOpenParenthesis.description": "Spacing between function names and opening parentheses of argument lists",
	"c_cpp.configuration.vcFormat.space.beforeFunctionOpenParenthesis.insert.description": "add a space before the opening parenthesis of a function",
	"c_cpp.configuration.vcFormat.space.beforeFunctionOpenParenthesis.remove.description": "spaces before opening parenthesis of a function are removed",
	"c_cpp.configuration.vcFormat.space.beforeFunctionOpenParenthesis.ignore.description": "spaces are left as entered",
	"c_cpp.configuration.vcFormat.space.withinParameterListParentheses.description": "A space is added after the opening parenthesis and also before the closing parenthesis in function parameter lists",
	"c_cpp.configuration.vcFormat.space.betweenEmptyParameterListParentheses.description": "When a function parameter list is empty, a space is inserted between its parentheses",
	"c_cpp.configuration.vcFormat.space.afterKeywordsInControlFlowStatements.description": "A space is added between the keyword and opening parenthesis in control flow statements",
	"c_cpp.configuration.vcFormat.space.withinControlFlowStatementParentheses.description": "A space is added after the opening parenthesis and also before the closing parenthesis in control flow statements",
	"c_cpp.configuration.vcFormat.space.beforeLambdaOpenParenthesis.description": "A space is added before the opening parenthesis of lambda argument lists",
	"c_cpp.configuration.vcFormat.space.withinCastParentheses.description": "A space is added after the opening parenthesis and also before the closing parenthesis of a C-style cast",
	"c_cpp.configuration.vcFormat.space.afterCastCloseParenthesis.description": "A space is added after the closing parenthesis of a C-style cast",
	"c_cpp.configuration.vcFormat.space.withinExpressionParentheses.description": "A space is added after the opening parenthesis and also before the closing parenthesis of a parenthesized expression",
	"c_cpp.configuration.vcFormat.space.beforeBlockOpenBrace.description": "A space is added before the opening braces of scope blocks",
	"c_cpp.configuration.vcFormat.space.betweenEmptyBraces.description": "When braces are empty and on the same line, a space is inserted between them",
	"c_cpp.configuration.vcFormat.space.beforeInitializerListOpenBrace.description": "A space is added before the opening brace of uniform initialization and initializer lists",
	"c_cpp.configuration.vcFormat.space.withinInitializerListBraces.description": "A space is added after the opening brace and also before the closing brace of uniform initialization and initializer lists",
	"c_cpp.configuration.vcFormat.space.preserveInInitializerList.description": "Spaces around commas are preserved insider uniform initialization and initializer lists",
	"c_cpp.configuration.vcFormat.space.beforeOpenSquareBracket.description": "A space is added before opening square brackets",
	"c_cpp.configuration.vcFormat.space.withinSquareBrackets.description": "A space is added after the opening square bracket and also before the closing square bracket",
	"c_cpp.configuration.vcFormat.space.beforeEmptySquareBrackets.description": "When square brackets are empty, a space is added before the opening bracket",
	"c_cpp.configuration.vcFormat.space.betweenEmptySquareBrackets.description": "When square brackets are empty, a space is inserted between them",
	"c_cpp.configuration.vcFormat.space.groupSquareBrackets.description": "For multi-dimensional arrays, all space between brackets is removed. Other settings that control space are overridden",
	"c_cpp.configuration.vcFormat.space.withinLambdaBrackets.description": "A space is added after the opening square bracket and also before the closing square bracket",
	"c_cpp.configuration.vcFormat.space.betweenEmptyLambdaBrackets.description": "When square brackets are empty, a space is inserted between them",
	"c_cpp.configuration.vcFormat.space.beforeComma.description": "A space is added before every comma",
	"c_cpp.configuration.vcFormat.space.afterComma.description": "A space is added after every comma",
	"c_cpp.configuration.vcFormat.space.removeAroundMemberOperators.description": "Spaces around member access operators, pointer-to-member operators, and scope resolution operators are removed",
	"c_cpp.configuration.vcFormat.space.beforeInheritanceColon.description": "A space is added before the colon for inherited types in class definitions",
	"c_cpp.configuration.vcFormat.space.beforeConstructorColon.description": "A space is added before the colon in constructor definitions",
	"c_cpp.configuration.vcFormat.space.removeBeforeSemicolon.description": "Spaces are removed before every semicolon",
	"c_cpp.configuration.vcFormat.space.insertAfterSemicolon.description": "A space is inserted after every semicolon",
	"c_cpp.configuration.vcFormat.space.removeAroundUnaryOperator.description": "Spaces between unary operators and operands are removed",
	"c_cpp.configuration.vcFormat.space.aroundBinaryOperator.description": "Spaces around binary operators",
	"c_cpp.configuration.vcFormat.space.aroundAssignmentOperator.description": "Spaces around assignment operators",
	"c_cpp.configuration.vcFormat.space.pointerReferenceAlignment.description": "Spaces around pointer and reference operators",
	"c_cpp.configuration.vcFormat.space.pointerReferenceAlignment.left.description": "pointer and reference operators are aligned to the left",
	"c_cpp.configuration.vcFormat.space.pointerReferenceAlignment.center.description": "pointer and reference operators are centered",
	"c_cpp.configuration.vcFormat.space.pointerReferenceAlignment.right.description": "pointer and reference operators are aligned to the right",
	"c_cpp.configuration.vcFormat.space.pointerReferenceAlignment.ignore.description": "pointer and reference operators are not formatted",
	"c_cpp.configuration.vcFormat.space.aroundTernaryOperator.description": "Spaces around conditional operators",
	"c_cpp.configuration.vcFormat.space.aroundOperators.insert.description": "a space is added before the operator and also after it",
	"c_cpp.configuration.vcFormat.space.aroundOperators.remove.description": "spaces before and after the operator are removed",
	"c_cpp.configuration.vcFormat.space.aroundOperators.ignore.description": "spaces are left as entered",
	"c_cpp.configuration.vcFormat.wrap.preserveBlocks.description": "Umbruchoptionen für Blöcke",
	"c_cpp.configuration.vcFormat.wrap.preserveBlocks.oneLiners.description": "a complete code block that is entered on one line is kept on one line, regardless of the values of any of the VC Format: New Line settings",
	"c_cpp.configuration.vcFormat.wrap.preserveBlocks.allOneLineScopes.description": "any code where the opening and closing brace is entered on one line is kept on one line, regardless of the values of any of the VC Format: New Line settings",
	"c_cpp.configuration.vcFormat.wrap.preserveBlocks.never.description": "code blocks are always formatted based on the values of the VC Format: New Line settings",
	"c_cpp.configuration.clang_format_path.description": "Der vollständige Pfad der ausführbaren clang-format-Datei. Wenn dieser nicht angegeben wird und clang-format im Umgebungspfad verfügbar ist, wird die Datei im Umgebungspfad verwendet. Ist sie nicht im Umgebungspfad verfügbar, wird eine im Erweiterungspaket enthaltene Kopie von clang-format verwendet.",
	"c_cpp.configuration.clang_format_style.description": "Coding style, currently supports: file, LLVM, Google, Chromium, Mozilla, WebKit, Emulated Visual Studio, and Visual Studio. Use \"file\" to load the style from a .clang-format file in the current or parent directory. When \"Visual Studio\" is used, the Visual C++ formatting engine will be invoked instead of clang-format. \"Emulated Visual Studio\" will generate a set of Visual Studio-like formatting options for clang-format. Use {key: value, ...} to set specific parameters. For example, the \"Visual Studio\" style is similar to: { BasedOnStyle: LLVM, UseTab: Never, IndentWidth: 4, TabWidth: 4, BreakBeforeBraces: Allman, AllowShortIfStatementsOnASingleLine: false, IndentCaseLabels: false, ColumnLimit: 0, AccessModifierOffset: -4, NamespaceIndentation: All }",
	"c_cpp.configuration.clang_format_fallbackStyle.description": "Name of the predefined style used as a fallback in case clang-format is invoked with style \"file\" but the .clang-format file is not found. In addition to the values supported by clang_format_style, you may also specify \"none\" to select no fallback style.",
	"c_cpp.configuration.clang_format_sortIncludes.description": "Wenn diese Option festgelegt ist, wird das durch den SortIncludes-Parameter festgelegte Sortierverhalten für Includes überschrieben.",
	"c_cpp.configuration.intelliSenseEngine.description": "Hiermit wird der IntelliSense-Anbieter gesteuert. \"Tagparser\" erzielt \"unscharfe\" Ergebnisse, die nicht kontextbezogen sind. \"Standard\" erzielt kontextabhängige Ergebnisse. \"Deaktiviert\" deaktiviert C/C++-Sprachdienstfeatures.",
	"c_cpp.configuration.intelliSenseEngineFallback.description": "Hiermit wird gesteuert, ob die IntelliSense-Engine bei Übersetzungseinheiten, die #include-Fehler enthalten, automatisch zum Tagparser wechselt.",
	"c_cpp.configuration.autocomplete.description": "Hiermit wird der Anbieter für die automatische Vervollständigung gesteuert. Die Einstellung \"Default\" verwendet die aktive IntelliSense-Engine. Bei der Einstellung \"Disabled\" wird die von Visual Studio Code bereitgestellte wortbasierte Vervollständigung verwendet.",
	"c_cpp.configuration.errorSquiggles.description": "Hiermit wird gesteuert, ob vermutete Kompilierungsfehler, die von der IntelliSense-Engine erkannt werden, an den Editor zurückgemeldet werden. Diese Einstellung wird von der Tagparser-Engine ignoriert.",
	"c_cpp.configuration.dimInactiveRegions.description": "Hiermit wird gesteuert, ob inaktive Präprozessorblöcke anders eingefärbt werden als aktiver Code. Diese Einstellung hat keine Auswirkungen, wenn IntelliSense deaktiviert ist oder wenn das standardmäßige Design mit hohem Kontrast verwendet wird.",
	"c_cpp.configuration.inactiveRegionOpacity.description": "Hiermit wird die Deckkraft von inaktiven Präprozessorblöcken gesteuert. Mögliche Werte liegen zwischen 0,1 und 1,0. Diese Einstellung gilt nur, wenn das Abblenden inaktiver Regionen aktiviert ist.",
	"c_cpp.configuration.inactiveRegionForegroundColor.description": "Hiermit wird die Schriftfarbe von inaktiven Präprozessorblöcken gesteuert. Die Eingabe erfolgt in Form eines hexadezimalen Farbcodes oder einer gültigen Designfarbe. Wenn diese Option nicht festgelegt ist, wird standardmäßig das Syntaxfarbschema des Editors verwendet. Diese Einstellung gilt nur, wenn das Abblenden inaktiver Regionen aktiviert ist.",
	"c_cpp.configuration.inactiveRegionBackgroundColor.description": "Hiermit wird die Hintergrundfarbe von inaktiven Präprozessorblöcken gesteuert. Die Eingabe erfolgt in Form eines hexadezimalen Farbcodes oder einer gültigen Designfarbe. Wenn diese Option nicht festgelegt ist, ist die Anzeige standardmäßig transparent. Diese Einstellung gilt nur, wenn das Abblenden inaktiver Regionen aktiviert ist.",
	"c_cpp.configuration.loggingLevel.description": "Die Ausführlichkeit der Protokollierung im Ausgabebereich. Die Reihenfolge der Stufen von \"am wenigsten ausführlich\" bis \"am ausführlichsten\" lautet: None < Error < Warning < Information < Debug.",
	"c_cpp.configuration.autoAddFileAssociations.description": "Hiermit wird gesteuert, ob Dateien automatisch zu \"files.associations\" hinzugefügt werden, wenn sie das Ziel eines Navigationsvorgangs aus einer C/C++-Datei sind.",
	"c_cpp.configuration.workspaceParsingPriority.description": "Hiermit wird gesteuert, ob beim Analysieren der nicht aktiven Arbeitsbereichsdateien Standbyfunktionen verwendet werden, um eine 100-prozentige Auslastung der CPU zu vermeiden. Die Werte \"highest\", \"high\", \"medium\" und \"low\" entsprechen jeweils etwa 100, 75, 50 und 25 % CPU-Auslastung.",
	"c_cpp.configuration.workspaceSymbols.description": "Die Symbole, die in die Abfrageergebnisse einbezogen werden sollen, wenn \"Zu Symbol im Arbeitsbereich wechseln\" aufgerufen wird",
	"c_cpp.configuration.exclusionPolicy.description": "Weist die Erweiterung an, wann die Einstellung \"files.exclude\" verwendet werden soll, wenn ermittelt wird, welche Dateien beim Durchlaufen der Pfade im Array \"browse.path\" der Codenavigationsdatenbank hinzugefügt werden sollen. \"checkFolders\" bedeutet, dass die Ausschlussfilter nur einmal pro Ordner ausgewertet werden (einzelne Dateien sind nicht aktiviert). \"checkFilesAndFolders\" bedeutet, dass die Ausschlussfilter für jede gefundene Datei und jeden gefundenen Ordner ausgewertet werden. Wenn die Einstellung \"files.exclude\" nur Ordner enthält, ist \"checkFolders\" die beste Wahl und erhöht die Geschwindigkeit, mit der die Erweiterung die Codenavigationsdatenbank initialisieren kann.",
	"c_cpp.configuration.preferredPathSeparator.description": "Das Zeichen, das als Pfadtrennzeichen für #include-Ergebnisse der automatischen Vervollständigung verwendet wird.",
	"c_cpp.configuration.simplifyStructuredComments.description": "If true, tooltips of hover and auto-complete will only display certain labels of structured comments. Otherwise, all comments are displayed.",
	"c_cpp.configuration.commentContinuationPatterns.items.anyof.string.description": "Das Muster, mit dem ein mehrzeiliger oder einzeiliger Kommentarblock beginnt. Das Fortsetzungsmuster wird standardmäßig auf \"*\" für mehrzeilige Kommentarblöcke oder auf diese Zeichenfolge für einzeilige Kommentarblöcke festgelegt.",
	"c_cpp.configuration.commentContinuationPatterns.items.anyof.object.begin.description": "Das Muster, mit dem ein mehrzeiliger oder einzeiliger Kommentarblock beginnt.",
	"c_cpp.configuration.commentContinuationPatterns.items.anyof.object.continue.description": "Der Text, der in der nächsten Zeile eingefügt wird, wenn in einem mehrzeiligen oder einzeiligen Kommentarblock die EINGABETASTE gedrückt wird.",
	"c_cpp.configuration.commentContinuationPatterns.description": "Definiert das Editor-Verhalten, wenn innerhalb eines mehrzeiligen oder einzeiligen Kommentarblocks die EINGABETASTE gedrückt wird.",
	"c_cpp.configuration.configurationWarnings.description": "Bestimmt, ob Popupbenachrichtigungen angezeigt werden, wenn eine Konfigurationsanbietererweiterung keine Konfiguration für eine Quelldatei bereitstellen kann.",
	"c_cpp.configuration.intelliSenseCachePath.description": "Hiermit wird der Ordnerpfad für zwischengespeicherte vorkompilierte Header definiert, die von IntelliSense verwendet werden. Der Standardcachepfad lautet unter Windows \"%LocalAppData%/Microsoft/vscode-cpptools\", unter Linux \"$XDG_CACHE_HOME/vscode-cpptools/\" (bzw. \"$HOME/.cache/vscode-cpptools/\", wenn XDG_CACHE_HOME nicht definiert ist) und auf dem Mac \"$HOME/Library/Caches/vscode-cpptools/\". Der Standardpfad wird verwendet, wenn kein Pfad angegeben wurde oder ein angegebener Pfad ungültig ist.",
	"c_cpp.configuration.intelliSenseCacheSize.description": "Maximale Größe des Festplattenspeichers pro Arbeitsbereich in MB für zwischengespeicherte vorkompilierte Header; die tatsächliche Nutzung schwankt möglicherweise um diesen Wert. Die Standardgröße beträgt 5120 MB. Das Zwischenspeichern vorkompilierter Header ist deaktiviert, wenn die Größe 0 ist.",
	"c_cpp.configuration.default.includePath.description": "The value to use in a configuration if \"includePath\" is not specified in c_cpp_properties.json. If \"includePath\" is specified, add \"${default}\" to the array to insert the values from this setting.",
	"c_cpp.configuration.default.defines.description": "Der Wert, der in einer Konfiguration verwendet werden soll, wenn \"defines\" nicht angegeben ist, oder die einzufügenden Werte, wenn \"${default}\" in \"defines\" vorhanden ist.",
	"c_cpp.configuration.default.macFrameworkPath.description": "Der Wert, der in einer Konfiguration verwendet werden soll, wenn \"macFrameworkPath\" nicht angegeben ist, oder die einzufügenden Werte, wenn \"${default}\" in \"macFrameworkPath\" vorhanden ist.",
	"c_cpp.configuration.default.windowsSdkVersion.description": "Die Version des Windows SDK-Includepfads zur Verwendung unter Windows, z. B. \"10.0.17134.0\".",
	"c_cpp.configuration.default.compileCommands.description": "Der Wert, der in einer Konfiguration verwendet werden soll, wenn \"compileCommands\" entweder nicht angegeben oder auf \"${default}\" festgelegt ist.",
	"c_cpp.configuration.default.forcedInclude.description": "Der Wert, der in einer Konfiguration verwendet werden soll, wenn \"forcedInclude\" nicht angegeben ist, oder die einzufügenden Werte, wenn \"${default}\" in \"forcedInclude\" vorhanden ist.",
	"c_cpp.configuration.default.intelliSenseMode.description": "Der Wert, der in einer Konfiguration verwendet werden soll, wenn \"intelliSenseMode\" entweder nicht angegeben oder auf \"${default}\" festgelegt ist.",
	"c_cpp.configuration.default.compilerPath.description": "Der Wert, der in einer Konfiguration verwendet werden soll, wenn \"compilerPath\" entweder nicht angegeben oder auf \"${default}\" festgelegt ist.",
	"c_cpp.configuration.default.compilerArgs.description": "Der Wert, der in der Konfiguration verwendet werden soll, wenn \"compilerArgs\" entweder nicht angegeben oder auf \"${default}\" festgelegt ist.",
	"c_cpp.configuration.default.cStandard.description": "Der Wert, der in einer Konfiguration verwendet werden soll, wenn \"cStandard\" entweder nicht angegeben oder auf \"${default}\" festgelegt ist.",
	"c_cpp.configuration.default.cppStandard.description": "Der Wert, der in einer Konfiguration verwendet werden soll, wenn \"cppStandard\" entweder nicht angegeben oder auf \"${default}\" festgelegt ist.",
	"c_cpp.configuration.default.configurationProvider.description": "Der Wert, der in einer Konfiguration verwendet werden soll, wenn \"configurationProvider\" entweder nicht angegeben oder auf \"${default}\" festgelegt ist.",
	"c_cpp.configuration.default.browse.path.description": "Der Wert, der in einer Konfiguration verwendet werden soll, wenn \"browse.path\" nicht angegeben ist, oder die einzufügenden Werte, wenn \"${default}\" in \"browse.path\" vorhanden ist.",
	"c_cpp.configuration.default.browse.databaseFilename.description": "Der Wert, der in einer Konfiguration verwendet werden soll, wenn \"browse.databaseFilename\" entweder nicht angegeben oder auf \"${default}\" festgelegt ist.",
	"c_cpp.configuration.default.browse.limitSymbolsToIncludedHeaders.description": "Der Wert, der in einer Konfiguration verwendet werden soll, wenn \"browse.limitSymbolsToIncludedHeaders\" entweder nicht angegeben oder auf \"${default}\" festgelegt ist.",
	"c_cpp.configuration.default.systemIncludePath.description": "Der Wert, der für den Systemincludepfad verwendet werden soll. Wenn diese Option festgelegt ist, wird der über die Einstellungen \"compilerPath\" und \"compileCommands\" erhaltene Systemincludepfad überschrieben.",
	"c_cpp.configuration.default.enableConfigurationSquiggles.description": "Hiermit wird gesteuert, ob die Erweiterung in \"c_cpp_properties.json\" erkannte Fehler meldet.",
	"c_cpp.configuration.default.customConfigurationVariables.description": "Der Wert, der in einer Konfiguration verwendet werden soll, wenn \"customConfigurationVariables\" nicht angegeben ist, oder die einzufügenden Werte, wenn \"${default}\" als Schlüssel in \"customConfigurationVariables\" vorhanden ist.",
	"c_cpp.configuration.updateChannel.description": "Legen Sie den Wert auf \"Insiders\" fest, um die neuesten Insiders-Builds der Erweiterung, die neue Features und Bugfixes enthalten, automatisch herunterzuladen und zu installieren.",
	"c_cpp.configuration.experimentalFeatures.description": "Hiermit wird gesteuert, ob experimentelle Features verwendet werden können.",
	"c_cpp.configuration.suggestSnippets.description": "Wenn dieser Wert auf TRUE festgelegt ist, werden Codeausschnitte vom Sprachserver bereitgestellt.",
	"c_cpp.configuration.enhancedColorization.description": "If enabled, code is colorized based on IntelliSense. This setting only applies if intelliSenseEngine is set to \"Default\".",
	"c_cpp.configuration.codeFolding.description": "Wenn diese Option aktiviert ist, werden Codefaltbereiche vom Sprachserver bereitgestellt.",
	"c_cpp.configuration.vcpkg.enabled.markdownDescription": "Hiermit aktivieren Sie Integrationsdienste für den [vcpkg-Abhängigkeits-Manager](https://aka.ms/vcpkg/).",
	"c_cpp.configuration.renameRequiresIdentifier.description": "Bei TRUE ist für \"Symbol umbenennen\" ein gültiger C-/C++-Bezeichner erforderlich.",
	"c_cpp.configuration.debugger.useBacktickCommandSubstitution.description": "Bei Festlegung auf TRUE verwendet die Befehlsersetzung der Debugger-Shell obsolete Backtick-Zeichen (`).",
	"c_cpp.contributes.views.cppReferencesView.title": "C/C++: andere Verweisergebnisse",
	"c_cpp.debuggers.pipeTransport.description": "Falls angegeben, weist diese Option den Debugger an, eine Verbindung mit einem Remotecomputer mithilfe einer anderen ausführbaren Datei als Pipe herzustellen, die Standardeingaben/-ausgaben zwischen VS Code und der ausführbaren Back-End-Datei für den MI-fähigen Debugger weiterleitet (z. B. gdb).",
	"c_cpp.debuggers.pipeTransport.default.pipeProgram": "Vollqualifizierten Pfad für den Pipeprogrammnamen eingeben, z. B. \"/usr/bin/ssh\"",
	"c_cpp.debuggers.pipeTransport.default.debuggerPath": "Der vollständige Pfad zum Debugger auf dem Zielcomputer, z. B. \"/usr/bin/gdb\".",
	"c_cpp.debuggers.pipeTransport.debuggerPath.description": "Der vollständige Pfad zum Debugger auf dem Zielcomputer, z. B. \"/usr/bin/gdb\".",
	"c_cpp.debuggers.pipeTransport.pipeCwd.description": "Der vollqualifizierte Pfad zum Arbeitsverzeichnis für das Pipeprogramm.",
	"c_cpp.debuggers.pipeTransport.pipeProgram.description": "Der vollqualifizierte auszuführende Pipebefehl.",
	"c_cpp.debuggers.pipeTransport.pipeArgs.description": "Befehlszeilenargumente, die zum Konfigurieren der Verbindung an das Pipeprogramm übergeben werden.",
	"c_cpp.debuggers.pipeTransport.pipeEnv.description": "Umgebungsvariablen, die an das Pipeprogramm übergeben werden.",
	"c_cpp.debuggers.pipeTransport.quoteArgs.description": "Gibt an, ob Anführungszeichen gesetzt werden sollen, wenn die einzelnen pipeProgram-Argumente Zeichen enthalten (z. B. Leerzeichen oder Tabstopps). Bei Einstellung auf \"false\" wird der Debuggerbefehl nicht mehr automatisch in Anführungszeichen gesetzt. \nDer Standardwert ist \"true\".",
	"c_cpp.debuggers.logging.description": "Optionale Flags zum Festlegen, welche Nachrichtentypen in der Debugging-Konsole protokolliert werden sollen.",
	"c_cpp.debuggers.logging.exceptions.description": "Optionales Flag zum Festlegen, ob Ausnahmemeldungen in der Debugging-Konsole protokolliert werden sollen. Der Standardwert ist TRUE.",
	"c_cpp.debuggers.logging.moduleLoad.description": "Optionales Flag zum Festlegen, ob Modulladeereignisse in der Debugging-Konsole protokolliert werden sollen. Der Standardwert ist TRUE.",
	"c_cpp.debuggers.logging.programOutput.description": "Optionales Flag zum Festlegen, ob die Programmausgabe in der Debugging-Konsole protokolliert werden soll. Der Standardwert ist TRUE.",
	"c_cpp.debuggers.logging.engineLogging.description": "Optionales Flag zum Festlegen, ob Nachrichten der Diagnosedebug-Engine in der Debugging-Konsole protokolliert werden sollen. Der Standardwert ist FALSE.",
	"c_cpp.debuggers.logging.trace.description": "Optionales Flag zum Festlegen, ob die Befehlsablaufverfolgung des Diagnoseadapters in der Debugging-Konsole protokolliert werden soll. Der Standardwert ist FALSE.",
	"c_cpp.debuggers.logging.traceResponse.description": "Optionales Flag zum Festlegen, ob die Befehls- und Antwortablaufverfolgung des Diagnoseadapters in der Debugging-Konsole protokolliert werden soll. Der Standardwert ist FALSE.",
	"c_cpp.debuggers.cppvsdbg.logging.threadExit.description": "Optionales Flag zum Bestimmen, ob Meldungen zum Beenden des Threads in der Debugging-Konsole protokolliert werden sollen. Standardwert: \"false\".",
	"c_cpp.debuggers.cppvsdbg.logging.processExit.description": "Optionales Flag zum Bestimmen, ob Meldungen zum Beenden des Zielprozesses in der Debugging-Konsole protokolliert werden sollen oder das Debugging beendet werden soll. Standardwert: \"true\".",
	"c_cpp.debuggers.text.description": "Der auszuführende Debuggerbefehl.",
	"c_cpp.debuggers.description.description": "Optionale Beschreibung des Befehls.",
	"c_cpp.debuggers.ignoreFailures.description": "Wenn dieser Wert auf TRUE festgelegt ist, werden durch den Befehl verursachte Fehler ignoriert. Der Standardwert ist FALSE.",
	"c_cpp.debuggers.program.description": "Vollständiger Pfad zur ausführbaren Programmdatei.",
	"c_cpp.debuggers.args.description": "Befehlszeilenargumente, die an das Programm übergeben werden.",
	"c_cpp.debuggers.cppdbg.type.description": "Der Typ der Engine. Muss \"cppdbg\" sein.",
	"c_cpp.debuggers.cppvsdbg.type.description": "Der Typ der Engine. Muss \"cppvsdbg\" sein.",
	"c_cpp.debuggers.targetArchitecture.description": "Die Architektur der zu debuggenden Komponente. Falls dieser Parameter nicht festgelegt ist, wird die Architektur automatisch erkannt. Zulässige Werte sind \"x86\", \"arm\", \"arm64\", \"mips\", \"x64\", \"amd64\" und \"x86_64\".",
	"c_cpp.debuggers.cwd.description": "Das Arbeitsverzeichnis des Ziels.",
	"c_cpp.debuggers.setupCommands.description": "Ein oder mehrere GDB/LLDB-Befehle, die zum Einrichten des zugrunde liegenden Debuggers ausgeführt werden. Beispiel: \"setupCommands\": [ { \"text\": \"-enable-pretty-printing\", \"description\": \"Enable GDB pretty printing\", \"ignoreFailures\": true }].",
	"c_cpp.debuggers.customLaunchSetupCommands.description": "Wenn diese Option angegeben wird, werden die Standardbefehle zum Starten eines Ziels durch einige andere Befehle ersetzt. Zum Anfügen eines Zielprozesses kann dies z. B. \"-target-attach\" sein. Im Fall einer leeren Befehlsliste werden die Startbefehle durch nichts ersetzt. Dies kann nützlich sein, wenn für den Debugger Startoptionen als Befehlszeilenoptionen angegeben werden. Beispiel: \"customLaunchSetupCommands\": [ { \"text\": \"target-run\", \"description\": \"run target\", \"ignoreFailures\": false }].",
	"c_cpp.debuggers.launchCompleteCommand.description": "Der Befehl, der nach der vollständigen Einrichtung des Debuggers ausgeführt wird, um den Zielprozess auszuführen. Zulässige Werte sind \"exec-run\", \"exec-continue\" und \"None\". Der Standardwert ist \"exec-run\".",
	"c_cpp.debuggers.cppdbg.visualizerFile.description": "Die .natvis-Datei, die beim Debuggen dieses Prozesses verwendet werden soll. Diese Option ist nicht mit der automatischen Strukturierung und Einrückung von GDB kompatibel. Weitere Informationen finden Sie auch bei \"showDisplayString\", wenn Sie diese Einstellung verwenden.",
	"c_cpp.debuggers.cppvsdbg.visualizerFile.description": "Die .natvis-Datei, die beim Debuggen dieses Prozesses verwendet werden soll.",
	"c_cpp.debuggers.showDisplayString.description": "Wenn eine visualizerFile angegeben wird, wird die Anzeigezeichenfolge von showDisplayString aktiviert. Durch Aktivieren dieser Option kann die Leistung während des Debuggings verlangsamt werden.",
	"c_cpp.debuggers.environment.description": "Umgebungsvariablen, die der Umgebung für das Programm hinzugefügt werden sollen. Beispiel: [ { \"name\": \"squid\", \"value\": \"clam\" } ].",
	"c_cpp.debuggers.envFile.description": "Absoluter Pfad zu einer Datei mit Umgebungsvariablendefinitionen. Für diese Datei sind Schlüssel-Wert-Paare pro Zeile durch ein Gleichheitszeichen getrennt. Beispiel: SCHLÜSSEL=WERT",
	"c_cpp.debuggers.additionalSOLibSearchPath.description": "Durch Semikolons getrennte Liste von Verzeichnissen, die für die Suche nach SO-Dateien verwendet werden sollen. Beispiel: \"c:\\dir1;c:\\dir2\".",
	"c_cpp.debuggers.MIMode.description": "Hiermit wird der Konsolendebugger angegeben, mit dem die MIDebugEngine eine Verbindung herstellt. Zulässige Werte sind \"gdb\" und \"lldb\".",
	"c_cpp.debuggers.miDebuggerPath.description": "Der Pfad zum MI-Debugger (z. B. gdb). Ist die Option nicht angegeben, wird zuerst nach dem Pfad für den Debugger gesucht.",
	"c_cpp.debuggers.miDebuggerArgs.description": "Zusätzliche Argumente für den MI-Debugger (z. B. gdb).",
	"c_cpp.debuggers.miDebuggerServerAddress.description": "Netzwerkadresse des MI-Debugger-Servers, mit dem eine Verbindung hergestellt werden soll (Beispiel: localhost:1234).",
	"c_cpp.debuggers.stopAtEntry.description": "Optionaler Parameter. Wenn dieser Wert auf TRUE festgelegt ist, sollte der Debugger am Einstiegspunkt des Ziels anhalten. Wenn die processId übergeben wird, hat dies keine Auswirkungen.",
	"c_cpp.debuggers.debugServerPath.description": "Optionaler vollständiger Pfad zum zu startenden Debugserver. Der Standardwert ist \"null\".",
	"c_cpp.debuggers.debugServerArgs.description": "Optionale Debugserverargumente. Der Standardwert ist \"null\".",
	"c_cpp.debuggers.serverStarted.description": "Optionales vom Server gestartetes Muster, nach dem in der Ausgabe des Debugservers gesucht wird. Der Standardwert ist \"null\".",
	"c_cpp.debuggers.filterStdout.description": "stdout-Stream für ein vom Server gestartetes Muster suchen und stdout in der Debugausgabe protokollieren. Der Standardwert ist \"true\".",
	"c_cpp.debuggers.filterStderr.description": "stderr-Stream für ein vom Server gestartetes Muster suchen und stderr in der Debugausgabe protokollieren. Der Standardwert ist \"false\".",
	"c_cpp.debuggers.serverLaunchTimeout.description": "Optionale Zeit in Millisekunden, während der der Debugger auf den Start von debugServer wartet. Der Standardwert ist 10.000.",
	"c_cpp.debuggers.coreDumpPath.description": "Optionaler vollständiger Pfad zu einer Kern-Speicherabbilddatei für das angegebene Programm. Der Standardwert ist \"NULL\".",
	"c_cpp.debuggers.cppdbg.externalConsole.description": "Wenn dieser Wert auf TRUE festgelegt ist, wird eine Konsole für die zu debuggende Komponente gestartet. Bei FALSE wird die Komponente unter Linux und Windows in der integrierten Konsole angezeigt.",
	"c_cpp.debuggers.cppvsdbg.externalConsole.description": "Wenn dieser Wert auf TRUE festgelegt ist, wird eine Konsole für die zu debuggende Komponente gestartet. Bei FALSE wird keine Konsole gestartet.",
	"c_cpp.debuggers.avoidWindowsConsoleRedirection.description": "Wenn dieser Wert auf TRUE festgelegt ist, wird für die zu debuggende Komponente die Konsolenumleitung deaktiviert, die für die Unterstützung des integrierten Terminals erforderlich ist.",
	"c_cpp.debuggers.sourceFileMap.description": "Optionale Quelldateizuordnungen, die an die Debug-Engine übergeben werden. Beispiel: { \"/original/source/path\":\"/current/source/path\" }",
	"c_cpp.debuggers.processId.anyOf.description": "Optionale Prozess-ID, an die der Debugger angefügt werden soll. Verwenden Sie \"${command:pickProcess}\", um eine Liste der lokalen ausgeführten Prozesse abzurufen, an die angefügt werden kann. Beachten Sie, dass einige Plattformen Administratorrechte erfordern, damit an einen Prozess angefügt werden kann.",
	"c_cpp.debuggers.symbolSearchPath.description": "Durch Semikolons getrennte Liste von Verzeichnissen, die für die Suche nach Symboldateien (PDB-Dateien) verwendet werden sollen. Beispiel: \"c:\\dir1;c:\\dir2\".",
	"c_cpp.debuggers.dumpPath.description": "Optionaler vollständiger Pfad zu einer Dumpdatei für das angegebene Programm. Beispiel: \"c:\\temp\\app.dmp\". Standardwert ist NULL.",
	"c_cpp.debuggers.enableDebugHeap.description": "Wenn dieser Wert auf FALSE festgelegt ist, wird der Prozess mit deaktiviertem Debug-Heap gestartet. Hiermit wird die Umgebungsvariable \"_NO_DEBUG_HEAP\" auf \"1\" festgelegt.",
	"c_cpp.debuggers.symbolLoadInfo.description": "Explizite Steuerung des Symbolladevorgangs.",
	"c_cpp.debuggers.symbolLoadInfo.loadAll.description": "Bei TRUE werden Symbole für alle Bibliotheken geladen, andernfalls werden keine solib-Symbole geladen. Der Standardwert ist TRUE.",
	"c_cpp.debuggers.symbolLoadInfo.exceptionList.description": "Liste der Dateinamen (Platzhalter zulässig), durch Semikolons \";\" getrennt. Ändert das Verhalten von LoadAll. Wenn LoadAll auf TRUE festgelegt ist, werden keine Symbole für Bibliotheken geladen, die einem beliebigen Namen in der Liste entsprechen. Andernfalls werden nur Symbole für übereinstimmende Bibliotheken geladen. Beispiel: \"foo.so;bar.so\"",
	"c_cpp.debuggers.requireExactSource.description": "Optionales Flag, um anzufordern, dass der aktuelle Quellcode mit der PDB-Datei übereinstimmt."
}