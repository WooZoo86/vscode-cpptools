/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
// Do not edit this file. It is machine generated.
{
	"c_cpp.command.configurationSelect.title": "Selecione uma Configuração...",
	"c_cpp.command.configurationProviderSelect.title": "Alterar Provedor de Configuração...",
	"c_cpp.command.configurationEditJSON.title": "Editar Configurações (JSON)",
	"c_cpp.command.configurationEditUI.title": "Editar Configurações (IU)",
	"c_cpp.command.switchHeaderSource.title": "Alternar Cabeçalho/Origem",
	"c_cpp.command.enableErrorSquiggles.title": "Habilitar Rabiscos de Erro",
	"c_cpp.command.disableErrorSquiggles.title": "Desabilitar Rabiscos de Erro",
	"c_cpp.command.toggleIncludeFallback.title": "Ativar/Desativar o Fallback do Mecanismo IntelliSense em Erros de Inclusão",
	"c_cpp.command.toggleDimInactiveRegions.title": "Ativar/Desativar a Colorização de Região Inativa",
	"c_cpp.command.resetDatabase.title": "Redefinir o Banco de Dados IntelliSense",
	"c_cpp.command.takeSurvey.title": "Responder Pesquisa",
	"c_cpp.command.buildAndDebugActiveFile.title": "Criar e Depurar Arquivo Ativo",
	"c_cpp.command.logDiagnostics.title": "Diagnóstico de Log",
	"c_cpp.command.referencesViewGroupByType.title": "Agrupar por Tipo de Referência",
	"c_cpp.command.referencesViewUngroupByType.title": "Desagrupar por Tipo de Referência",
	"c_cpp.command.rescanWorkspace.title": "Examinar Novamente o Workspace",
	"c_cpp.command.vcpkgClipboardInstallSuggested.title": "Copiar o comando de instalação vcpkg para a área de transferência",
	"c_cpp.command.vcpkgOnlineHelpSuggested.title": "Visite a página de ajuda do vcpkg",
	"c_cpp.configuration.formatting.description": "Configures the formatting engine",
	"c_cpp.configuration.formatting.clangFormat.description": "clang-format will be used to format code",
	"c_cpp.configuration.formatting.vcFormat.description": "The Visual C++ formatting engine will be used to format code",
	"c_cpp.configuration.formatting.Default.description": "clang-format will be used to format code",
	"c_cpp.configuration.formatting.Disabled.description": "Code formatting will be disabled",
	"c_cpp.configuration.vcFormat.indent.braces.description": "Braces are indented by the amount specified in the Editor: Tab Size setting",
	"c_cpp.configuration.vcFormat.indent.multiLineRelativeTo.description": "When a new line is typed, indent the new line relatively to:",
	"c_cpp.configuration.vcFormat.indent.multiLineRelativeTo.outermostParenthesis.description": "the outermost open parenthesis",
	"c_cpp.configuration.vcFormat.indent.multiLineRelativeTo.innermostParenthesis.description": "the innermost open parenthesis",
	"c_cpp.configuration.vcFormat.indent.multiLineRelativeTo.statementBegin.description": "the beginning of the current statement",
	"c_cpp.configuration.vcFormat.indent.preserveIndentationWithinParentheses.description": "When a new line is typed, it is aligned under the opening parenthesis or it is indented by the amount specified in the Editor: Tab Size setting",
	"c_cpp.configuration.vcFormat.indent.caseLabels.description": "Labels are indented relative to switch statements by the amount specified in the Editor: Tab Size setting",
	"c_cpp.configuration.vcFormat.indent.caseContents.description": "Code inside case is indented relative to its label by the amount specified in the Editor: Tab Size setting",
	"c_cpp.configuration.vcFormat.indent.caseContentsWhenBlock.description": "Indent braces following a case statement by the amount specified in the Editor: Tab Size setting",
	"c_cpp.configuration.vcFormat.indent.lambdaBracesWhenParameter.description": "Indent braces of lambdas used as function parameters relative to the start of the statement by the amount specified in the Editor: Tab Size setting",
	"c_cpp.configuration.vcFormat.indent.gotoLabels.description": "The position of goto labels",
	"c_cpp.configuration.vcFormat.indent.gotoLabels.oneLeft.description": "to the left of the current code indentation, by the amount specified in the Editor: Tab Size setting",
	"c_cpp.configuration.vcFormat.indent.gotoLabels.leftmostColumn.description": "at the leftmost edge of the code",
	"c_cpp.configuration.vcFormat.indent.gotoLabels.none.description": "goto labels will not be formatted",
	"c_cpp.configuration.vcFormat.indent.preprocessor.description": "The position of preprocessor directives",
	"c_cpp.configuration.vcFormat.indent.preprocessor.oneLeft.description": "to the left of the current code indentation, by the amount specified in the Editor: Tab Size setting",
	"c_cpp.configuration.vcFormat.indent.preprocessor.leftmostColumn.description": "at the leftmost edge of the code",
	"c_cpp.configuration.vcFormat.indent.preprocessor.none.description": "preprocessor directives will not be formatted",
	"c_cpp.configuration.vcFormat.indent.accessSpecifiers.description": "Access specifiers are indented relative to class or struct definitions by the amount specified in the Editor: Tab Size setting",
	"c_cpp.configuration.vcFormat.indent.namespaceContents.description": "Code is indented relative to its enclosing namespace by the amount specified in the Editor: Tab Size setting",
	"c_cpp.configuration.vcFormat.indent.preserveComment.description": "O recuo dos comentários não é alterado durante as operações de formatação",
	"c_cpp.configuration.vcFormat.newLine.beforeOpenBrace.namespace.description": "The position of opening braces for namespaces",
	"c_cpp.configuration.vcFormat.newLine.beforeOpenBrace.type.description": "The position of opening braces for type definitions",
	"c_cpp.configuration.vcFormat.newLine.beforeOpenBrace.lambda.description": "The position of opening braces for lambda functions",
	"c_cpp.configuration.vcFormat.newLine.beforeOpenBrace.function.description": "The position of opening braces for functions",
	"c_cpp.configuration.vcFormat.newLine.beforeOpenBrace.block.description": "The position of opening braces for control blocks",
	"c_cpp.configuration.vcFormat.newLine.beforeOpenBrace.newLine.description": "opening braces are moved to a new line",
	"c_cpp.configuration.vcFormat.newLine.beforeOpenBrace.sameLine.description": "opening braces are kept on the same line and a space is added before each one",
	"c_cpp.configuration.vcFormat.newLine.beforeOpenBrace.ignore.description": "opening braces are not formatted",
	"c_cpp.configuration.vcFormat.newLine.scopeBracesOnSeparateLines.description": "Place opening and closing braces for scopes on separate lines",
	"c_cpp.configuration.vcFormat.newLine.closeBraceSameLine.emptyType.description": "Para tipos vazios, mover as chaves de fechamento para a mesma linha que as chaves de abertura",
	"c_cpp.configuration.vcFormat.newLine.closeBraceSameLine.emptyFunction.description": "Para corpos de funções vazias, mover as chaves de fechamento para a mesma linha que as chaves de abertura",
	"c_cpp.configuration.vcFormat.newLine.beforeCatch.description": "Colocar 'catch' e palavras-chave semelhantes em uma nova linha",
	"c_cpp.configuration.vcFormat.newLine.beforeElse.description": "Colocar 'else' em uma nova linha",
	"c_cpp.configuration.vcFormat.newLine.beforeWhileInDoWhile.description": "Colocar 'while', em um loop do-while, em uma nova linha",
	"c_cpp.configuration.vcFormat.space.beforeFunctionOpenParenthesis.description": "Spacing between function names and opening parentheses of argument lists",
	"c_cpp.configuration.vcFormat.space.beforeFunctionOpenParenthesis.insert.description": "add a space before the opening parenthesis of a function",
	"c_cpp.configuration.vcFormat.space.beforeFunctionOpenParenthesis.remove.description": "spaces before opening parenthesis of a function are removed",
	"c_cpp.configuration.vcFormat.space.beforeFunctionOpenParenthesis.ignore.description": "spaces are left as entered",
	"c_cpp.configuration.vcFormat.space.withinParameterListParentheses.description": "A space is added after the opening parenthesis and also before the closing parenthesis in function parameter lists",
	"c_cpp.configuration.vcFormat.space.betweenEmptyParameterListParentheses.description": "When a function parameter list is empty, a space is inserted between its parentheses",
	"c_cpp.configuration.vcFormat.space.afterKeywordsInControlFlowStatements.description": "A space is added between the keyword and opening parenthesis in control flow statements",
	"c_cpp.configuration.vcFormat.space.withinControlFlowStatementParentheses.description": "A space is added after the opening parenthesis and also before the closing parenthesis in control flow statements",
	"c_cpp.configuration.vcFormat.space.beforeLambdaOpenParenthesis.description": "A space is added before the opening parenthesis of lambda argument lists",
	"c_cpp.configuration.vcFormat.space.withinCastParentheses.description": "A space is added after the opening parenthesis and also before the closing parenthesis of a C-style cast",
	"c_cpp.configuration.vcFormat.space.afterCastCloseParenthesis.description": "A space is added after the closing parenthesis of a C-style cast",
	"c_cpp.configuration.vcFormat.space.withinExpressionParentheses.description": "A space is added after the opening parenthesis and also before the closing parenthesis of a parenthesized expression",
	"c_cpp.configuration.vcFormat.space.beforeBlockOpenBrace.description": "A space is added before the opening braces of scope blocks",
	"c_cpp.configuration.vcFormat.space.betweenEmptyBraces.description": "When braces are empty and on the same line, a space is inserted between them",
	"c_cpp.configuration.vcFormat.space.beforeInitializerListOpenBrace.description": "A space is added before the opening brace of uniform initialization and initializer lists",
	"c_cpp.configuration.vcFormat.space.withinInitializerListBraces.description": "A space is added after the opening brace and also before the closing brace of uniform initialization and initializer lists",
	"c_cpp.configuration.vcFormat.space.preserveInInitializerList.description": "Spaces around commas are preserved insider uniform initialization and initializer lists",
	"c_cpp.configuration.vcFormat.space.beforeOpenSquareBracket.description": "A space is added before opening square brackets",
	"c_cpp.configuration.vcFormat.space.withinSquareBrackets.description": "A space is added after the opening square bracket and also before the closing square bracket",
	"c_cpp.configuration.vcFormat.space.beforeEmptySquareBrackets.description": "When square brackets are empty, a space is added before the opening bracket",
	"c_cpp.configuration.vcFormat.space.betweenEmptySquareBrackets.description": "When square brackets are empty, a space is inserted between them",
	"c_cpp.configuration.vcFormat.space.groupSquareBrackets.description": "For multi-dimensional arrays, all space between brackets is removed. Other settings that control space are overridden",
	"c_cpp.configuration.vcFormat.space.withinLambdaBrackets.description": "A space is added after the opening square bracket and also before the closing square bracket",
	"c_cpp.configuration.vcFormat.space.betweenEmptyLambdaBrackets.description": "When square brackets are empty, a space is inserted between them",
	"c_cpp.configuration.vcFormat.space.beforeComma.description": "A space is added before every comma",
	"c_cpp.configuration.vcFormat.space.afterComma.description": "A space is added after every comma",
	"c_cpp.configuration.vcFormat.space.removeAroundMemberOperators.description": "Spaces around member access operators, pointer-to-member operators, and scope resolution operators are removed",
	"c_cpp.configuration.vcFormat.space.beforeInheritanceColon.description": "A space is added before the colon for inherited types in class definitions",
	"c_cpp.configuration.vcFormat.space.beforeConstructorColon.description": "A space is added before the colon in constructor definitions",
	"c_cpp.configuration.vcFormat.space.removeBeforeSemicolon.description": "Spaces are removed before every semicolon",
	"c_cpp.configuration.vcFormat.space.insertAfterSemicolon.description": "A space is inserted after every semicolon",
	"c_cpp.configuration.vcFormat.space.removeAroundUnaryOperator.description": "Spaces between unary operators and operands are removed",
	"c_cpp.configuration.vcFormat.space.aroundBinaryOperator.description": "Spaces around binary operators",
	"c_cpp.configuration.vcFormat.space.aroundAssignmentOperator.description": "Spaces around assignment operators",
	"c_cpp.configuration.vcFormat.space.pointerReferenceAlignment.description": "Spaces around pointer and reference operators",
	"c_cpp.configuration.vcFormat.space.pointerReferenceAlignment.left.description": "pointer and reference operators are aligned to the left",
	"c_cpp.configuration.vcFormat.space.pointerReferenceAlignment.center.description": "pointer and reference operators are centered",
	"c_cpp.configuration.vcFormat.space.pointerReferenceAlignment.right.description": "pointer and reference operators are aligned to the right",
	"c_cpp.configuration.vcFormat.space.pointerReferenceAlignment.ignore.description": "pointer and reference operators are not formatted",
	"c_cpp.configuration.vcFormat.space.aroundTernaryOperator.description": "Spaces around conditional operators",
	"c_cpp.configuration.vcFormat.space.aroundOperators.insert.description": "a space is added before the operator and also after it",
	"c_cpp.configuration.vcFormat.space.aroundOperators.remove.description": "spaces before and after the operator are removed",
	"c_cpp.configuration.vcFormat.space.aroundOperators.ignore.description": "spaces are left as entered",
	"c_cpp.configuration.vcFormat.wrap.preserveBlocks.description": "Opções de quebra de linha para blocos",
	"c_cpp.configuration.vcFormat.wrap.preserveBlocks.oneLiners.description": "a complete code block that is entered on one line is kept on one line, regardless of the values of any of the VC Format: New Line settings",
	"c_cpp.configuration.vcFormat.wrap.preserveBlocks.allOneLineScopes.description": "any code where the opening and closing brace is entered on one line is kept on one line, regardless of the values of any of the VC Format: New Line settings",
	"c_cpp.configuration.vcFormat.wrap.preserveBlocks.never.description": "code blocks are always formatted based on the values of the VC Format: New Line settings",
	"c_cpp.configuration.clang_format_path.description": "O caminho completo do executável no clang-format. Se ele não for especificado e o clang-format estiver disponível no caminho do ambiente, ele será usado. Se ele não for encontrado no caminho do ambiente, será usada uma cópia no clang-format empacotada com a extensão.",
	"c_cpp.configuration.clang_format_style.description": "Coding style, currently supports: file, LLVM, Google, Chromium, Mozilla, WebKit, Emulated Visual Studio, and Visual Studio. Use \"file\" to load the style from a .clang-format file in the current or parent directory. When \"Visual Studio\" is used, the Visual C++ formatting engine will be invoked instead of clang-format. \"Emulated Visual Studio\" will generate a set of Visual Studio-like formatting options for clang-format. Use {key: value, ...} to set specific parameters. For example, the \"Visual Studio\" style is similar to: { BasedOnStyle: LLVM, UseTab: Never, IndentWidth: 4, TabWidth: 4, BreakBeforeBraces: Allman, AllowShortIfStatementsOnASingleLine: false, IndentCaseLabels: false, ColumnLimit: 0, AccessModifierOffset: -4, NamespaceIndentation: All }",
	"c_cpp.configuration.clang_format_fallbackStyle.description": "Name of the predefined style used as a fallback in case clang-format is invoked with style \"file\" but the .clang-format file is not found. In addition to the values supported by clang_format_style, you may also specify \"none\" to select no fallback style.",
	"c_cpp.configuration.clang_format_sortIncludes.description": "Se definido, substitui o comportamento de classificação de inclusão determinado pelo parâmetro SortIncludes.",
	"c_cpp.configuration.intelliSenseEngine.description": "Controla o provedor IntelliSense. \"Analisador de Marca\" fornece resultados \"difusos\" sem reconhecimento de contexto. \"Padrão\" fornece resultados de reconhecimento de contexto. \"Desabilitado\" desativa os recursos do serviço de linguagem C/C++.",
	"c_cpp.configuration.intelliSenseEngineFallback.description": "Controla se o mecanismo IntelliSense alternará automaticamente para o Analisador de Marca para unidades de tradução contendo erros de #include.",
	"c_cpp.configuration.autocomplete.description": "Controla o provedor de preenchimento automático. \"Padrão\" usa o mecanismo ativo do IntelliSense. \"Desabilitado\" usa o preenchimento baseado em palavras fornecido pelo Visual Studio Code.",
	"c_cpp.configuration.errorSquiggles.description": "Controla se os erros de compilação suspeitos detectados pelo mecanismo IntelliSense serão relatados de volta ao editor. Esta configuração é ignorada pelo mecanismo do Analisador de Marca.",
	"c_cpp.configuration.dimInactiveRegions.description": "Controla se os blocos de pré-processador inativos são coloridos de forma diferente do código ativo. Esta configuração não terá efeito se o IntelliSense estiver desabilitado ou se você estiver usando o tema de Alto Contraste Padrão.",
	"c_cpp.configuration.inactiveRegionOpacity.description": "Controla a opacidade dos blocos de pré-processador inativos. Escala entre 0,1 e 1,0. Esta configuração é aplicável somente quando o esmaecimento da região inativa está habilitado.",
	"c_cpp.configuration.inactiveRegionForegroundColor.description": "Controla a cor da fonte dos blocos de pré-processador inativos. A entrada está no formato de um código de cor hexadecimal ou de uma Cor de Tema válida. Se não estiver definido, o esquema de cores de sintaxe do editor será usado como padrão. Esta configuração é aplicável somente quando o esmaecimento da região inativa está habilitado.",
	"c_cpp.configuration.inactiveRegionBackgroundColor.description": "Controla a cor da tela de fundo dos blocos de pré-processador inativos. A entrada está no formato de um código de cor hexadecimal ou de uma Cor de Tema válida. Se não estiver definido, transparente será usado como padrão. Esta configuração é aplicável somente quando o esmaecimento da região inativa está habilitado.",
	"c_cpp.configuration.loggingLevel.description": "O detalhamento do log no Painel de Saída. A ordem dos níveis de menos detalhado para mais detalhado é: None < Error < Warning < Information < Debug.",
	"c_cpp.configuration.autoAddFileAssociations.description": "Controla se os arquivos são automaticamente adicionados a files.associations quando eles são o destino de uma operação de navegação de um arquivo C/C++.",
	"c_cpp.configuration.workspaceParsingPriority.description": "Controla se a análise dos arquivos de workspace não ativos usa a suspensão para evitar o uso de 100% da CPU. Os valores mais alto, alto, médio e baixo correspondem a aproximadamente 100, 75, 50 e 25% de uso da CPU.",
	"c_cpp.configuration.workspaceSymbols.description": "Os símbolos a serem incluídos nos resultados da consulta quando 'Ir para o Símbolo no Workspace' é invocado",
	"c_cpp.configuration.exclusionPolicy.description": "Instrui a extensão quando usar a configuração \"files.exclude\" ao determinar quais arquivos devem ser adicionados ao banco de dados de navegação de código enquanto atravessa os caminhos na matriz \"browse.path\". \"checkFolders\" significa que os filtros de exclusão só serão avaliados uma vez por pasta (arquivos individuais não são verificados). \"checkFilesAndFolders\" significa que os filtros de exclusão serão avaliados em relação a cada arquivo e pasta encontrados. Se a configuração de \"files.exclude\" contiver somente pastas, \"checkFolders\" será a melhor opção e aumentará a velocidade à qual a extensão pode inicializar o banco de dados de navegação de código.",
	"c_cpp.configuration.preferredPathSeparator.description": "O caractere usado como separador de caminho para resultados de preenchimento automático de #include.",
	"c_cpp.configuration.simplifyStructuredComments.description": "If true, tooltips of hover and auto-complete will only display certain labels of structured comments. Otherwise, all comments are displayed.",
	"c_cpp.configuration.commentContinuationPatterns.items.anyof.string.description": "O padrão que inicia um bloco de comentário de linha única ou de várias linhas. O padrão de continuação usa ' * ' como padrão para blocos de comentário de várias linhas ou esta cadeia de caracteres para blocos de comentário de linha única.",
	"c_cpp.configuration.commentContinuationPatterns.items.anyof.object.begin.description": "O padrão que inicia um bloco de comentário de linha única ou de várias linhas.",
	"c_cpp.configuration.commentContinuationPatterns.items.anyof.object.continue.description": "O texto que será inserido na próxima linha quando Enter for pressionado dentro de um bloco de comentário de linha única ou de várias linhas.",
	"c_cpp.configuration.commentContinuationPatterns.description": "Define o comportamento do editor para quando a tecla Enter é pressionada dentro de um bloco de comentário de linha única ou de várias linhas.",
	"c_cpp.configuration.configurationWarnings.description": "Determina se as notificações pop-up serão mostradas quando uma extensão do provedor de configuração não puder fornecer uma configuração para um arquivo de origem.",
	"c_cpp.configuration.intelliSenseCachePath.description": "Define o caminho da pasta para os cabeçalhos pré-compilados armazenados em cache usados pelo IntelliSense. O caminho do cache padrão é \"%LocalAppData%/Microsoft/vscode-cpptools\" no Windows, \"$XDG_CACHE_HOME/vscode-cpptools/\" no Linux (ou \"~/.cache/vscode-cpptools/\", quando XDG_CACHE_HOME não está definido) e \"$HOME/Library/Caches/vscode-cpptools/\" no Mac. O caminho padrão será usado se nenhum outro for especificado ou se o caminho definido for inválido.",
	"c_cpp.configuration.intelliSenseCacheSize.description": "Tamanho máximo do espaço de disco rígido por workspace, em megabytes, para cabeçalhos pré-compilados armazenados em cache; o uso real pode flutuar ao redor desse valor. O tamanho padrão é de 5120 MB. O cache pré-compilado de cabeçalho é desabilitado quando o tamanho é 0.",
	"c_cpp.configuration.default.includePath.description": "The value to use in a configuration if \"includePath\" is not specified in c_cpp_properties.json. If \"includePath\" is specified, add \"${default}\" to the array to insert the values from this setting.",
	"c_cpp.configuration.default.defines.description": "O valor a ser usado em uma configuração se \"defines\" não for especificado ou os valores a serem inseridos se \"${default}\" estiver presente em \"defines\".",
	"c_cpp.configuration.default.macFrameworkPath.description": "O valor a ser usado em uma configuração se \"macFrameworkPath\" não for especificado ou os valores a serem inseridos se \"${default}\" estiver presente em \"macFrameworkPath\".",
	"c_cpp.configuration.default.windowsSdkVersion.description": "A versão do caminho de inclusão do SDK do Windows a ser usada no Windows, por exemplo, '10.0.17134.0'.",
	"c_cpp.configuration.default.compileCommands.description": "O valor a ser usado em uma configuração se \"compileCommands\" não for especificado ou estiver definido como \"${default}\".",
	"c_cpp.configuration.default.forcedInclude.description": "O valor a ser usado em uma configuração se \"forcedInclude\" não for especificado ou os valores a serem inseridos se \"${default}\" estiver presente em \"forcedInclude\".",
	"c_cpp.configuration.default.intelliSenseMode.description": "O valor a ser usado em uma configuração se \"intelliSenseMode\" não for especificado ou estiver definido como \"${default}\".",
	"c_cpp.configuration.default.compilerPath.description": "O valor a ser usado em uma configuração se \"compilerPath\" não for especificado ou estiver definido como \"${default}\".",
	"c_cpp.configuration.default.compilerArgs.description": "O valor a ser usado na configuração se \"compilerArgs\" não for especificado ou estiver definido como \"${default}\".",
	"c_cpp.configuration.default.cStandard.description": "O valor a ser usado em uma configuração se \"cStandard\" não for especificado ou estiver definido como \"${default}\".",
	"c_cpp.configuration.default.cppStandard.description": "O valor a ser usado em uma configuração se \"cppStandard\" não for especificado ou estiver definido como \"${default}\".",
	"c_cpp.configuration.default.configurationProvider.description": "O valor a ser usado em uma configuração se \"configurationProvider\" não for especificado ou estiver definido como \"${default}\".",
	"c_cpp.configuration.default.browse.path.description": "O valor a ser usado em uma configuração se \"browse.path\" não for especificado ou os valores a serem inseridos se \"${default}\" estiver presente em \"browse.path\".",
	"c_cpp.configuration.default.browse.databaseFilename.description": "O valor a ser usado em uma configuração se a opção \"browse.databaseFilename\" não for especificada ou estiver definida como \"${default}\".",
	"c_cpp.configuration.default.browse.limitSymbolsToIncludedHeaders.description": "O valor a ser usado em uma configuração se a opção \"browse.limitSymbolsToIncludedHeaders\" não for especificada ou estiver definida como \"${default}\".",
	"c_cpp.configuration.default.systemIncludePath.description": "O valor a ser usado para o caminho de inclusão do sistema. Se definido, substitui o caminho de inclusão do sistema adquirido por meio das configurações \"compilerPath\" e \"compileCommands\".",
	"c_cpp.configuration.default.enableConfigurationSquiggles.description": "Controla se a extensão relatará erros detectados em c_cpp_properties.json.",
	"c_cpp.configuration.default.customConfigurationVariables.description": "O valor a ser usado em uma configuração se \"customConfigurationVariables\" não for definido ou os valores a serem inseridos se \"${default}\" estiver presente como uma chave em \"customConfigurationVariables\".",
	"c_cpp.configuration.updateChannel.description": "Defina como \"Insiders\" para baixar e instalar automaticamente os builds mais recentes do Insiders para a extensão, que incluem recursos futuros e correções de bugs.",
	"c_cpp.configuration.experimentalFeatures.description": "Controla se os recursos \"experimentais\" podem ser usados.",
	"c_cpp.configuration.suggestSnippets.description": "Se for true, os snippets serão fornecidos pelo servidor de idiomas.",
	"c_cpp.configuration.enhancedColorization.description": "If enabled, code is colorized based on IntelliSense. This setting only applies if intelliSenseEngine is set to \"Default\".",
	"c_cpp.configuration.codeFolding.description": "Se habilitado, os intervalos de dobramento de código serão fornecidos pelo servidor de idiomas.",
	"c_cpp.configuration.vcpkg.enabled.markdownDescription": "Habilitar os serviços de integração para o [gerenciador de dependências vcpkg](https://aka.ms/vcpkg/).",
	"c_cpp.configuration.renameRequiresIdentifier.description": "Se for true, 'Renomear Símbolo' exigirá um identificador C/C++ válido.",
	"c_cpp.configuration.debugger.useBacktickCommandSubstitution.description": "Se for true, a substituição do comando do shell do depurador usará o acento grave obsoleto (`)",
	"c_cpp.contributes.views.cppReferencesView.title": "C/C++: outros resultados de referências",
	"c_cpp.debuggers.pipeTransport.description": "Quando presente, isso instrui o depurador a conectar-se a um computador remoto usando outro executável como um pipe que retransmitirá a entrada/saída padrão entre o VS Code e o executável do back-end do depurador habilitado para MI (como gdb).",
	"c_cpp.debuggers.pipeTransport.default.pipeProgram": "insira o caminho totalmente qualificado para o nome do programa do pipe, por exemplo '/usr/bin/ssh'",
	"c_cpp.debuggers.pipeTransport.default.debuggerPath": "O caminho completo para o depurador no computador de destino, por exemplo, /usr/bin/gdb.",
	"c_cpp.debuggers.pipeTransport.debuggerPath.description": "O caminho completo para o depurador no computador de destino, por exemplo, /usr/bin/gdb.",
	"c_cpp.debuggers.pipeTransport.pipeCwd.description": "O caminho totalmente qualificado para o diretório de trabalho para o programa do pipe.",
	"c_cpp.debuggers.pipeTransport.pipeProgram.description": "O comando do pipe totalmente qualificado para executar.",
	"c_cpp.debuggers.pipeTransport.pipeArgs.description": "Argumentos da linha de comando passados para o programa do pipe para configurar a conexão.",
	"c_cpp.debuggers.pipeTransport.pipeEnv.description": "Variáveis de ambiente passadas para o programa do pipe.",
	"c_cpp.debuggers.pipeTransport.quoteArgs.description": "Se os argumentos individuais do pipeProgram contiverem caracteres (como espaços ou tabulações), eles deverão ser colocados entre aspas? Se 'false', o comando debugger não será mais colocado entre aspas automaticamente. \nO padrão é 'true'.",
	"c_cpp.debuggers.logging.description": "Sinalizadores opcionais para determinar quais tipos de mensagens devem ser registrados no Console de Depuração.",
	"c_cpp.debuggers.logging.exceptions.description": "Sinalizador opcional para determinar se as mensagens de exceção devem ser registradas no Console de Depuração. Usa true como padrão.",
	"c_cpp.debuggers.logging.moduleLoad.description": "Sinalizador opcional para determinar se os eventos de carregamento do módulo devem ser registrados no Console de Depuração. Usa true como padrão.",
	"c_cpp.debuggers.logging.programOutput.description": "Sinalizador opcional para determinar se a saída do programa deve ser registrada no Console de Depuração. Usa true como padrão.",
	"c_cpp.debuggers.logging.engineLogging.description": "Sinalizador opcional para determinar se as mensagens do mecanismo de depuração de diagnóstico devem ser registradas no Console de Depuração. Usa false como padrão.",
	"c_cpp.debuggers.logging.trace.description": "Sinalizador opcional para determinar se o rastreamento de comandos do adaptador de diagnóstico deve ser registrado no Console de Depuração. Usa false como padrão.",
	"c_cpp.debuggers.logging.traceResponse.description": "Sinalizador opcional para determinar se o rastreamento de resposta e de comandos do adaptador de diagnóstico deve ser registrado no Console de Depuração. Usa false como padrão.",
	"c_cpp.debuggers.cppvsdbg.logging.threadExit.description": "Sinalizador opcional para determinar se as mensagens de saída do thread devem ser registradas no Console de Depuração. Padrão: `false`.",
	"c_cpp.debuggers.cppvsdbg.logging.processExit.description": "Sinalizador opcional para determinar se o processo de destino sai das mensagens que devem ser registradas no Console de Depuração ou a depuração é interrompida. Padrão: `true`.",
	"c_cpp.debuggers.text.description": "O comando do depurador a se executar.",
	"c_cpp.debuggers.description.description": "Descrição opcional para o comando.",
	"c_cpp.debuggers.ignoreFailures.description": "Se for true, as falhas do comando deverão ser ignoradas. O valor padrão é false.",
	"c_cpp.debuggers.program.description": "Caminho completo para o executável do programa.",
	"c_cpp.debuggers.args.description": "Argumentos de linha de comando passados para o programa.",
	"c_cpp.debuggers.cppdbg.type.description": "O tipo do mecanismo. Precisa ser \"cppdbg\".",
	"c_cpp.debuggers.cppvsdbg.type.description": "O tipo do mecanismo. Precisa ser \"cppvsdbg\".",
	"c_cpp.debuggers.targetArchitecture.description": "A arquitetura do depurador. Ela será detectada automaticamente a menos que este parâmetro seja definido. Os valores permitidos são x86, arm, arm64, mips, x64, amd64 e x86_64.",
	"c_cpp.debuggers.cwd.description": "O diretório de trabalho do destino",
	"c_cpp.debuggers.setupCommands.description": "Um ou mais comandos GDB/LLDB para executar para configurar o depurador subjacente. Por exemplo: \"setupCommands\": [ { \"text\": \"-enable-pretty-printing\", \"description\": \"Enable GDB pretty printing\", \"ignoreFailures\": true }].",
	"c_cpp.debuggers.customLaunchSetupCommands.description": "Se fornecido, isto substitui os comandos padrão usados para iniciar um destino com outros comandos. Por exemplo, isto pode ser \"-target-attach\" para anexar a um processo de destino. Uma lista de comandos vazia substituiu os comandos de inicialização por nada, o que pode ser útil se o depurador é fornecido com opções de lançamento como opções da linha de comando. Por exemplo: \"customLaunchSetupCommands\": [ { \"text\": \"target-run\", \"description\": \"run target\", \"ignoreFailures\": false }].",
	"c_cpp.debuggers.launchCompleteCommand.description": "O comando para executar após o depurador ser completamente configurado para causar a execução do processo de destino. Os valores permitidos são \"exec-run\", \"exec-continue\" e \"None\". O valor padrão é \"exec-run\".",
	"c_cpp.debuggers.cppdbg.visualizerFile.description": "arquivo .natvis a ser usado durante a depuração deste processo. Esta opção não é compatível com a reformatação automática GDB. Além disso, confira \"showDisplayString\" se estiver usando esta configuração.",
	"c_cpp.debuggers.cppvsdbg.visualizerFile.description": "arquivo .natvis a ser usado durante a depuração deste processo.",
	"c_cpp.debuggers.showDisplayString.description": "Quando um visualizerFile é especificado, showDisplayString habilita a cadeia de caracteres de exibição. Ativar essa opção pode causar um desempenho mais lento durante a depuração.",
	"c_cpp.debuggers.environment.description": "Variáveis de ambiente para adicionar ao ambiente para o programa. Por exemplo: [ { \"name\": \"squid\", \"value\": \"clam\" } ].",
	"c_cpp.debuggers.envFile.description": "Caminho absoluto para um arquivo que contém as definições de variável de ambiente. Este arquivo tem pares chave-valor separados por um sinal de igual por linha. Por exemplo, CHAVE=VALOR",
	"c_cpp.debuggers.additionalSOLibSearchPath.description": "Lista separada por ponto e vírgula de diretórios a serem usados para pesquisar arquivos .so. Exemplo: \"c:\\dir1;c:\\dir2\".",
	"c_cpp.debuggers.MIMode.description": "Indica o depurador de console ao qual o MIDebugEngine será conectado. Os valores permitidos são \"gdb\" \"lldb\".",
	"c_cpp.debuggers.miDebuggerPath.description": "O caminho para o depurador de MI (como o gdb). Quando não for especificado, ele pesquisará primeiro o caminho para o depurador.",
	"c_cpp.debuggers.miDebuggerArgs.description": "Argumentos adicionais para o depurador MI (como o gdb).",
	"c_cpp.debuggers.miDebuggerServerAddress.description": "Endereço de rede do Servidor de Depurador MI ao qual se conectar (exemplo: localhost:1234).",
	"c_cpp.debuggers.stopAtEntry.description": "Parâmetro opcional. Se for true, o depurador deverá parar no ponto de entrada do destino. Se processId for passado, não terá efeito.",
	"c_cpp.debuggers.debugServerPath.description": "Caminho completo opcional para o servidor de depuração iniciar. O padrão é null.",
	"c_cpp.debuggers.debugServerArgs.description": "Args opcionais do servidor de depuração. O padrão é null.",
	"c_cpp.debuggers.serverStarted.description": "Padrão iniciado pelo servidor opcional para procurar na saída do servidor de depuração. O padrão é null.",
	"c_cpp.debuggers.filterStdout.description": "Pesquise o fluxo stdout para o padrão iniciado pelo servidor e log stdout para depurar a saída. O padrão é true.",
	"c_cpp.debuggers.filterStderr.description": "Pesquise o fluxo stderr para o padrão iniciado pelo servidor e log stderr para depurar a saída. O padrão é false.",
	"c_cpp.debuggers.serverLaunchTimeout.description": "Tempo opcional, em milissegundos, para o depurador aguardar o debugServer iniciar. O padrão é 10.000.",
	"c_cpp.debuggers.coreDumpPath.description": "Caminho completo opcional para um arquivo de despejo de núcleo para o programa especificado. O padrão é nulo.",
	"c_cpp.debuggers.cppdbg.externalConsole.description": "Se for true, um console será iniciado para o depurador. Se for false, no Linux e no Windows, ele será exibido no Console Integrado.",
	"c_cpp.debuggers.cppvsdbg.externalConsole.description": "Se for true, um console será iniciado para o depurador. Se for false, nenhum console será iniciado.",
	"c_cpp.debuggers.avoidWindowsConsoleRedirection.description": "Se for true, desabilitará o redirecionamento do console do depurador requerido para o suporte do Terminal Integrado.",
	"c_cpp.debuggers.sourceFileMap.description": "Mapeamentos de arquivo de origem opcionais passados para o mecanismo de depuração. Exemplo: '{ \"/original/source/path\":\"/current/source/path\" }'",
	"c_cpp.debuggers.processId.anyOf.description": "ID do processo opcional ao qual anexar o depurador. Use \"${command:pickProcess}\" para obter uma lista de processos locais em execução aos quais anexar. Observe que algumas plataformas exigem privilégios de administrador para anexação a um processo.",
	"c_cpp.debuggers.symbolSearchPath.description": "Lista separada por ponto e vírgula de diretórios a serem usados para pesquisar arquivos de símbolo (ou seja, pdb). Exemplo: \"c:\\dir1;c:\\dir2\".",
	"c_cpp.debuggers.dumpPath.description": "Caminho completo opcional para um arquivo de despejo para o programa especificado. Exemplo: \"c:\\temp\\app.dmp\". Usa nulo como padrão.",
	"c_cpp.debuggers.enableDebugHeap.description": "Se for false, o processo será iniciado com o heap de depuração desabilitado. Isso define a variável de ambiente '_NO_DEBUG_HEAP' como '1'.",
	"c_cpp.debuggers.symbolLoadInfo.description": "Controle explícito do carregamento de símbolo.",
	"c_cpp.debuggers.symbolLoadInfo.loadAll.description": "Se for true, os símbolos de todas as bibliotecas serão carregados, caso contrário, não será carregado nenhum símbolo solib. O valor padrão é true.",
	"c_cpp.debuggers.symbolLoadInfo.exceptionList.description": "Lista de nomes de arquivo (curingas permitidos) separados por ponto e vírgula ';'. Modifica o comportamento de LoadAll. Se LoadAll for true, não carregue símbolos para bibliotecas que correspondam a um nome na lista. Caso contrário, carregue símbolos somente para bibliotecas que correspondam. Exemplo: \"foo.so;bar.so\"",
	"c_cpp.debuggers.requireExactSource.description": "Sinalizador opcional para exigir que o código-fonte atual corresponda ao PDB."
}